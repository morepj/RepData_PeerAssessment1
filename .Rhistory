expFit(us_select_10$time, us_select_10$internet.mil)
logisticFit(us_select_10$time, us_select_10$internet.mil)
us_select$internet.mil[us_select$time == 16]
us_select$internet.mil[us_select$year == 2006]
e <- expFitPred(us_select_10$time, us_select_10$internet.mil, 16)
us_select$internet.mil[us_select$time==16] - e
e
l <- logisticFitPred(us_select_10$time, us_select_10, 16)
l <- logisticFitPred(us_select_10$time, us_select_10$internet.mil, 16)
l
us_select$internet.mil[us_select$time == 16] - l
tripleFit(us_select_10$time, us_select_10$internet.mil)
expFitPred(us_select_10$time, us_select_10$internet.mil, 22)
library(SDSFoundations)
world <- WorldBankData
dim(world)
names(world)
world$internet.users.proportion <- world$internet.users / world$population
fivenum(world$internet.users.proportion)
world.after.1990 <- world[world$year >= 1990, ]
world.after.1990$time <- world.after.1990$year - 1990
fivenum(world.after.1990$time)
denmark <- world.after.1990[world.after.1990$Country == "Denmark",]
dim(denmark)
table(denmark$Country)
table(world$Country)
table(world.after.1990$Country)
belarus <- world.after.1990[world.after.1990$Country == "Belarus", ]
dim(belarus)
tripleFit(denmark$time, denmark$internet.users)
tripleFit(denmark$time, denmark$internet.users.proportion)
tripleFit(belarus$time, belarus$internet.users.proportion)
expFit(denmark$time, denmark$internet.users.proportion)
logisticFit(denmark$time, denmark$internet.users.proportion)
expFit(belarus$time, belarus$internet.users.proportion)
logisticFit(belarus$time, belarus$internet.users.proportion)
logisticFit(denmark$time, denmark$internet.users.proportion)
C <- 0.89668
a <- 308.8345
b <- 1.73124
pred <- 0.1
tm <- ((log((C/pred) - 1) - log(a))/log(b)
tm <- (log((C/pred) - 1) - log(a))/log(b)
tm
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
denmark$internet.users.proportion[denmark$year == 1996]
denmark$internet.users.proportion[denmark$year == 1997]
denmark$internet.users.proportion[denmark$year == 1990]
denmark$internet.users.proportion[denmark$year == 1991]
1990+tm
logisticFit(belarus$time, belarus$internet.users.proportion)
C <- 0.8987
a <- 422.4322
b <- 1.31884
pred <- 0.1
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
1990+tm
C <- 0.8987
a <- 422.4322
b <- 1.31884
pred <- 0.1
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
1990+tm
denmark$internet.users.proportion[denmark$year == 2004]
denmark$internet.users.proportion[denmark$year == 2003]
C <- 0.89668
a <- 308.8345
b <- 1.73124
pred <- 0.1
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
denmark$internet.users.proportion[denmark$year == 1997]
C <- 0.8987
a <- 422.4322
b <- 1.31884
pred <- 0.1
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
1990+tm
denmark$internet.users.proportion[denmark$year == 2003]
denmark$internet.users.proportion[denmark$year == 1999]
denmark$internet.users.proportion[denmark$year == 1995]
denmark$internet.users.proportion[denmark$year == 1997]
belarus$internet.users.proportion[belarus$year == 2003]
belarus$internet.users.proportion[belarus$year == 2004]
fivenum(belarus$year)
matrix(c(belarus$year, belarus$internet.users.proportion))
matrix(belarus$year, belarus$internet.users.proportion)
cbind(belarus$year, belarus$internet.users.proportion)
cbind(denmark$year, denmark$internet.users.proportion)
C <- 0.89668
a <- 308.8345
b <- 1.73124
pred <- 0.8
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
C <- 0.89668
a <- 308.8345
b <- 1.73124
pred <- 0.8
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
denmark$internet.users.proportion[denmark$year == 2004]
C <- 0.8987
a <- 422.4322
b <- 1.31884
pred <- 0.8
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
1990+tm
cbind(belarus$year, belarus$internet.users.proportion)
C <- 0.89668
a <- 308.8345
b <- 1.73124
pred <- 0.1
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
denmark$internet.users.proportion[denmark$year == 1996]
tripleFit(denmark$time, denmark$internet.users.proportion)
tripleFit(belarus$time, belarus$internet.users.proportion)
C <- 0.8987
a <- 422.4322
b <- 1.31884
pred <- 0.1
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
1990+tm
belarus$internet.users.proportion[belarus$year == 2004]
cbind(belarus$year, belarus$internet.users.proportion)
ans <- 1990+tm
C <- 0.8987
a <- 422.4322
b <- 1.31884
pred <- 0.8
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
1990+tm
belarus$internet.users.proportion[belarus$year == 2004]
C <- 0.8987
a <- 422.4322
b <- 1.31884
pred <- 0.1
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
1990+tm
C <- 0.8987
a <- 422.4322
b <- 1.31884
pred <- 0.8
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
1990+tm
C <- 0.89668
a <- 308.8345
b <- 1.73124
pred <- 0.1
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
1990+tm
C <- 0.89668
a <- 308.8345
b <- 1.73124
pred <- 0.8
tm <- -(log((C/pred) - 1) - log(a))/log(b)
tm
1990+tm
library(SDSFoundations)
world <- WorldBankData
brazil <- world[world$Country == "Brazil", ]
dim(brazil)
brazil <- world[world$Country == "Brazil" & world$year >= 1995, ]
dim(brazil)
brazil$"years since 1995" <- brazil$year - 1995
names(brazil)
brazil$mobile.users.mil <- brazil$mobile.users / brazil$population
brazil$mobile.users[brazil$year == 2000]
brazil$mobile.users.mil <- brazil$mobile.users / 1000000
brazil$mobile.users.mil[brazil$year == 2000]
brazil$year[brazil$mobile.users.mil >= 100]
brazil$year[brazil$mobile.users.mil >= 100][1]
expFit(brazil$"years since 1995", brazil$mobile.users.mil)
logisticFit(brazil$"years since 1995", brazil$mobile.users.mil)
logisticFit(brazil$year, brazil$mobile.users.mil)
logisticFitPred(brazil$"years since 1995", brazil$mobile.users.mil, 2025-1995)
brazil$mobile.users.mil[brazil$year == 2000]
brazil$year[brazil$mobile.users.mil >= 100][1]
logisticFit(brazil$"years since 1995", brazil$mobile.users.mil)
367/257
43*1.57^14
43*0.57^14
C <- 3273.31
b <- 1.46     a = 43.59
b <- 1.46
a <- 43.59
b <- 1.57
t <- 14
43*1.46^14
C/(1+(a * b^(-t)))
76.64*1.46^14
C <- 3273.31
a <- 43.59
b <- 1.57
t <- 14
C/(1+(a * b^(-t)))
15325-4379
3034-4379
x <- c(1,3)
y <- c(25,45)
linFit(x, y)
expFit(x, y)
linFitPred(x, y, 7)
expFitPred(x, y, 7)
a <- 18.634
b <- 1.342
y <- 325
x <- log(y/a)/log(b)
x
expFitPred(x, y, 9)
x <- c(1,3)
y <- c(25,45)
a <- 18.634
b <- 1.342
n <- 325
t <- log(y/a)/log(b)
t
expFitPred(x, y, 9)
expFitPred(x, y, 10)
C <- 2000
a <- 152.10
b <- 2.17
log(a)/log(b)
t <- log(a)/log(b)
C / (1 + (a * b^(-t)))
t <- 6
C / (1 + (a * b^(-t)))
t <- 7
C / (1 + (a * b^(-t)))
t <- 10
C / (1 + (a * b^(-t)))
t <- 9
C / (1 + (a * b^(-t)))
(77 - 74)/2.17
mu <- 74
sigma <- 13
n <- 36
stdErr <- sigma / sqrt(n)
stdErr
muBar <- 77
zScore <- (muBar - mu) / stdErr
zScore
zScore <- 1.96
margin.of.err <- zScore * sigma / sqrt(n)
margin.of.err
conf.interval <- c(muBar-margin.of.err, muBar+margin.of.err)
conf.interval
vanilla.callories <- c(180, 200, 190, 230, 80, 160, 170, 130, 140, 220, 110, 120, 100, 170)
mean(vanilla.callories)
muBar <- mean(vanilla.callories)
muBar
sigma <- sd(vanilla.callories)
sigma
sigma <- 48.5
sigmax <- sd(vanilla.callories)
sigmax
n <- 14
stdErr <- sigma / sqrt(n)
stdErr
zScore <- 1.96
margin.of.err <- zScore * stdErr
margin.of.err
muBar <- mean(vanilla.callories)
muBar
conf.interval <- c(muBar-margin.of.err, muBar+margin.of.err)
conf.interval
vanilla.callories <- c(180, 200, 190, 230, 80, 160, 170, 130, 140, 220, 110, 120, 100, 170)
muBar <- mean(vanilla.callories)
muBar
sigma <- 48.5
sigmax <- sd(vanilla.callories)
sigmax
n <- 14
stdErr <- sigma / sqrt(n)
stdErr
zScore <- 1.96
margin.of.err <- zScore * stdErr
margin.of.err
conf.interval <- c(muBar-margin.of.err, muBar+margin.of.err)
conf.interval
library(SDSFoundations)
survey <- StudentSurvey
View(survey)
dim(survey)
mean(survey$age)
sd(survey$age)
hist(survey$age)
sample(survey$age, size = 30)
myxbar <- rep(NA, 1000)
for(i in 1:1000){
mysamp <- sample(survey, size=30)
myxbar[i] <- mean(mysamp)
}
for(i in 1:1000){
mysamp <- sample(survey$age, size=30)
myxbar[i] <- mean(mysamp)
}
hist(myxbar)
mean(myxbar)
sd(myxbar)
sd(survey$age)/sqrt(30)
library(SDSFoundations)
survey <- StudentSurvey
dim(survey)
d <- 'adfdsf'
length(d)
nchar(d)
survey$ID[survey$name_letter > 5 & survey$ID <= 10]
length(survey$ID[survey$name_letter > 5 & survey$ID <= 10])
nchar(survey$name_letters[survey$happy < 40][1])
survey$name_letters[survey$happy < 40]
survey$name_letters[survey$happy < 40][1]
table(survey$name_letters)
mean(survey$name_letters)
sd(survey$name_letters)
hist(survey$name_letters)
fivenum(survey$name_letters)
xbar5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =5)
xbar5[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(xbar5,xlim=c(2,10))
# Calculate the mean and sd of the sampling distribution.
mean(xbar5)
sd(xbar5)
# Compare to the std dev predicted by the CTL.
sd(survey$name_letters)/sqrt(5)
#Repeat for samples of size n=15
xbar15 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =15)
xbar15[i] <- mean(x)}
hist(xbar15,xlim=c(2,10))
mean(xbar15)
sd(xbar15)
sd(survey$name_letters)/sqrt(15)
#Repeat for samples of size n=25
xbar25 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =25)
xbar25[i] <- mean(x)}
hist(xbar25,xlim=c(2,10))
mean(xbar25)
sd(xbar25)
sd(survey$name_letters)/sqrt(25)
mean(c(mean(xbar5), mean(xbar15), mean(xbar25)))
mu <- 3.08
sigma <- 0.40
muBar <- 3.2
zScore <- (muBar - mu)/sigma
zScore
mu <- 28
sigma <- 11
n <- 23
muBar <- 35.1
sigmabar <- sigma/sqrt(n)
sigmabar
sigmaBar <- sigma/sqrt(n)
sigmaBar
zScore <- (muBar - mu) / sigmaBar
zScore
1 - pnorm(zScore)
mu <- 3.08
sigma <- 0.40
muBar <- 3.2
zScore <- (muBar - mu)/sigma
zScore
1 - pnorm(zScore)
mu <- 28
sigma <- 11
n <- 23
muBar <- 35.1
sigmaBar <- sigma/sqrt(n)
sigmaBar
zScore <- (muBar - mu) / sigmaBar
zScore
1 - pnorm(zScore)
sigma <- 1.5
n <- 15
muBar<- 471.46
sigmaBar <- sigma / sqrt(n)
sigmaBar
stdErr <- sigmaBar
zScore <- 1.96 # confidence of 95% means zScore = 1.96
sigmaBar
conf.interval <- c(muBar-margin.of.err, muBar+margin.of.err)
conf.interval
margin.of.err <- 0.387
conf.interval <- c(muBar-margin.of.err, muBar+margin.of.err)
conf.interval
sigmaBar <- sigma / sqrt(n)
sigmaBar
stdErr <- sigmaBar
zScore <- 1.96 # confidence of 95% means zScore = 1.96
margin.of.err <- zScore * stdErr
margin.of.err
margin.of.err <- 0.759
conf.interval <- c(muBar-margin.of.err, muBar+margin.of.err)
conf.interval
mu <- 8
muBar <- 8.12
sigma <- 0.72
n <- 81
sigmaBar <- sigma / sqrt(n)
sigmaBar
zScore <- (muBar - mu) / sigmaBar
zScore
1 - pnorm(zScore)
x <- rnorm(100, sd =0.5)
mean(x, na.rm = TRUE)
setwd("/data/courses/reproduce-research/work/reproduce-research/RepData_PeerAssessment1")
dat <- read.csv("activity.csv", header=TRUE)
dat <- transform(dat, date <- factor(date))
str(dat)
steps.per.day <- tapply(dat$steps, dat$date, sum, na.rm = TRUE)
str(steps.per.day)
names(steps.per.day)
steps.per.day["2012-10-02"]
steps <- data.frame(steps.per.day, names(steps.per.day))
hist(steps$steps.per.day, breaks = length(steps.per.day), xlab = " Number of Steps Each Day", main = "Histogram of Steps Taken Each Day")
mu <- mean(steps.per.day, na.rm = TRUE)
median <- median(steps.per.day, na.rm = TRUE)
mu
summary(steps.per.day)
median
dat <- transform(dat, interval = ordered(as.numeric(interval)))
str(dat)
avg.steps.per.interval <- tapply(dat$steps, dat$interval, mean, na.rm = TRUE)
head(avg.steps.per.interval)
names(avg.steps.per.interval)
avg.steps <- data.frame(steps = avg.steps.per.interval, interval = as.numeric(names(avg.steps.per.interval)))
plot(x = avg.steps$interval, y = avg.steps$steps, type = "l", xlab = "Interval", ylab = "Steps", main = "Average Steps per Interval")
avg.steps[which.max(avg.steps$steps), 2]
foo <- function(x = 1, y = 2) c(x, y)
bar <- function(n, x) replicate(n, foo(x = x))
bar(5, x = 3)
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
weekdays(dat$date)
weekdays.Date(dat$date)
weekdays.POSIXt(dat$date)
dat <- read.csv("activity.csv", header=TRUE)
weekdays(dat$date)
str(dat$date)
str(dat)
weekdays(dat$date[1])
setwd("/data/courses/reproduce-research/work/reproduce-research/RepData_PeerAssessment1")
dat <- read.csv("activity.csv", header=TRUE)
str(dat)
activity <- read.csv("activity.csv", header=TRUE)
str(activity)
weekdays(as.character(activity$date))
as.Date(strptime(mvtheft$Date, "%y/%m/%d"))
as.Date(strptime(activity$date, "%y/%m/%d"))
as.Date(strptime(activity$date, "%y-%m-%d"))
str(activity)
as.Date(strptime(as.character(activity$date), "%y-%m-%d"))
as.character(activity$date)
as.Date(strptime(as.character(activity$date), "%y-%m-%d"))
as.character(activity$date)
as.Date(strptime(as.character(activity$date), "%y/%m/%d"))
as.Date(strptime(as.character(activity$date))
as.Date(strptime(as.character(activity$date)))
as.Date(strptime(as.character(activity$date)), format="%Y-%m-%d")
as.Date(strptime(as.character(activity$date)), "%Y-%m-%d")
as.Date(strptime(as.character(activity$date), "%Y-%m-%d"))
str(as.Date(strptime(as.character(activity$date), "%Y-%m-%d")))
dim(activity)
is.na(activity)
table(is.na(activity))
table(is.na(dat))
table(is.na(dat))["TRUE"]
dat <- read.csv("activity.csv", header=TRUE)
dat <- transform(dat, date <- factor(date))
dat <- transform(dat, interval = ordered(as.numeric(interval)))
table(is.na(dat))["TRUE"]
mvals <- table(is.na(dat))["TRUE"]
mvals
mvals[0]
mvals[1]
table(is.na(dat))[0]
table(is.na(dat))[1]
table(is.na(dat))[2]
table(is.na(dat))[2][1]
table(is.na(dat))[2][2]
table(is.na(dat))[2][0]
table(is.na(dat))[2][1]
sum(is.na(dat))
mvals <- sum(is.na(dat))
mvals
sum(is.na(dat$steps))
sum(is.na(dat$date))
sum(is.na(dat$interval))
dat1 <- data.frame(dat$interval, dat$date, dat$steps)
str(dat1)
dat1 <- data.frame(as.integer(dat$interval), as.factor(dat$date), as.integer(dat$steps))
str(dat1)
dat1 <- read.csv("activity.csv", header=TRUE)
str(dat1)
summary(dat1$steps)
